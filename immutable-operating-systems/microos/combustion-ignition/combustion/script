#!/bin/bash
# combustion: network prepare
set -euxo pipefail

### --- START VARIABLES --- ###
## SYSTEM
NODE_HOSTNAME="pulceo-microos-node-632611c1-0306-4d9b-b8cf-94dd16eb0a87-1"

## KEEPALIVED
USE_CLUSTER_LOAD_BALANCER_WITH_KEEPALIVED=1 # do not use in cloud environments
CLUSTER_LOAD_BALANCER_IP="192.168.125.2" # replace with floating IP or IP address of cloud load balancer

### --- END VARIABLES --- ###

### --- START NETWORK CONFIGURATION --- ###

nm_config() {
    umask 077 # Required for NM config
    mkdir -p /etc/NetworkManager/system-connections/
    
    cat >/etc/NetworkManager/system-connections/dynamic.nmconnection <<-EOF
    [connection]
    id=dynamic
    type=ethernet
    interface-name=ens5
    autoconnect=true

    [ipv4]
    method=auto
EOF

    cat >/etc/NetworkManager/system-connections/static.nmconnection <<-EOF
    [connection]
    id=static
    type=ethernet
    interface-name=ens6
    autoconnect=true

    [ipv4]
    method=manual
    dns=192.168.125.1
    address1=192.168.125.10/24,192.168.125.1
EOF
}

if [ "${1-}" = "--prepare" ]; then
    nm_config # Configure NM in the initrd
    exit 0
fi

# Redirect output to the console
exec > >(exec tee -a /dev/tty0) 2>&1
nm_config # Configure NM in the system

### --- END NETWORK CONFIGURATION --- ###

### --- START SYSTEM CONFIGURATION --- ###

# Set hostname
echo $NODE_HOSTNAME > /etc/hostname

# Set a password for root, generate the hash with "openssl passwd -6"
echo 'root:$6$sJ7HRQHeyKIilmc6$uM729dc/w11EMwf2Ywf0Shp9O9cHpZ2h.MPUatITZrgQ53HTvk8iRW5i8LKvIZoNSvDGYgORUjUo6MXVd1dZ11' | chpasswd -e
# Add a public ssh key and enable sshd
mkdir -pm700 /root/.ssh/
echo 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBO6ThrVoB8yod4TFlffB2W117yjzILpwX/Jv/HkSwJE868aNvxPCtWwICHLTWV3wgqtkWcLXF1wLsoLq60hhNPg= sebastian.boehm@d162046.dhcp.netz-service.uni-bamberg.de' >> /root/.ssh/authorized_keys
systemctl enable sshd.service

# Required for SELINUX, installs semanage
# TODO: remove for production
zypper --non-interactive install policycoreutils-python-utils wget curl nano
### --- END SYSTEM CONFIGURATION --- ###

## TODO: REMOVE - include installation of nginx
# ./nginx.sh

## include installation of  haproxy
# ./haproxy.sh

### --- START K3S INSTALLATION --- ###
## K3S
cat k3s_token >> /root/k3s_token
INSTALL_K3S_UPSTREAM=true  ## Set to false if you want to use the openSUSE rpm, also add the package name to USER_REQUIRED_PACKAGES
INSTALL_K3S_EXEC='server --cluster-init --write-kubeconfig-mode=644 --node-ip=192.168.125.10 --token-file=/root/k3s_token'
if $INSTALL_K3S_UPSTREAM; then
    ## Download and install the latest k3s installer
    curl -L --output k3s_installer.sh https://get.k3s.io && install -m755 k3s_installer.sh /usr/bin/
    ## Create a systemd unit that installs k3s if not installed yet
    cat <<- EOF > /etc/systemd/system/install-rancher-k3s.service
    [Unit]
    Description=Run K3s installer
    Wants=network-online.target
    After=network.target network-online.target
    ConditionPathExists=/usr/bin/k3s_installer.sh
    ConditionPathExists=!/usr/local/bin/k3s
    [Service]
    Type=forking
    TimeoutStartSec=120
    Environment="INSTALL_K3S_EXEC=$INSTALL_K3S_EXEC"
    ExecStart=/usr/bin/k3s_installer.sh
    ExecStartPost=/usr/sbin/reboot
    RemainAfterExit=yes
    KillMode=process
    [Install]
    WantedBy=multi-user.target
EOF
fi

systemctl enable install-rancher-k3s.service
### --- END K3S INSTALLATION --- ###

### --- START KEEPALIVED CONFIGURATION --- ###
# zypper --non-interactive install keepalived

#     cat >/etc/keepalived/keepalived.conf <<-EOF
#     vrrp_script chk_haproxy {
#         script 'killall -0 haproxy' # faster than pidof
#         interval 2
#     }

#     vrrp_instance haproxy-vip {
#         interface ens6
#         state MASTER # MASTER on lb-1, BACKUP on lb-2
#         priority 200 # 200 on lb-1, 100 on lb-2

#         virtual_router_id 51

#         virtual_ipaddress {
#             192.168.125.2/24
#         }

#         track_script {
#             chk_haproxy
#         }
#     }
# EOF
# systemctl enable keepalived
# systemctl start keepalived
### --- END KEEPALIVED CONFIGURATION --- ###

### --- START K3S INSTALLATION --- ###

### --- END K3S INSTALLATION --- ###


# Leave a marker
echo "Configured with combustion" > /etc/issue.d/combustion
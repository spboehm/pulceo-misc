---
title: "PULCEO* in Action"
subtitle: "Towards API-driven Cloud-Edge Orchestration <br /> with PULCEO: A Proof of Concept"
author: Sebastian Böhm and Guido Wirtz
institute: University of Bamberg, Germany
format: 
  revealjs:
    smaller: true
    slide-number: true
    footer: <https://spboehm.github.io/pulceo-misc/>
    logo: images/dsg.png
    css: custom.scss
---

## Cloud-Edge Continuum {.smaller}

## Motivation (1): Real-world experiments

Why yet another Cloud-Edge Continuum Framework?

*"I'm a researcher and I have developed a sophisticated **service placement** strategy. I tested it in a **simulated environment** with iFogSim2 and it reduced the overall **resource utilization** by 30% and improved the **average response time** perceived by a couple of clients by 20% compared to the baseline".*

<br/>

So far so good.

<br/>

But what about real-world experiments?

## Motivation (2): Real-world experiments are time-consuming

:::: {.columns}

::: {.column width="55%"} 

- Smolka and Mann (2022)^[S. Smolka and Z. Á. Mann, “Evaluation of fog application placement algorithms: a survey,” Computing, vol. 104, no. 6, pp. 1397–1423, Jun. 2022.
] investigated 99 fog application placement algorithms
- 19 out of 99 solutions (19%) used a small test-bed
- No real-world deployment was observed
:::

::: {.column width="45%"}
![](images/smolka-mann-2022.png)
:::

::::

## Motivation (3) {.smaller}

*"Now I want to test it in a real cloud-edge infrastructure. I want a tool that supports the lifecycle of **creating** the infrastructure, **operate** my applications, **monitors** devices and applications, and helps with **evaluation** and **documentation** for my scientific publication."*

<br/>

:::: {.columns}

::: {.column width="80%"} 
- **Creation of topology:** 
  - **Nodes:** Edge and fog devices, virtual machines, etc.
  - **Links:** Relations between nodes for measuring round-trip time and bandwidth
- **Monitoring:** Various kind of metrics (CPU, ...), sampling rate, etc.
- **Operation:** Resource allocation and service placement
- **Evaluation:** Data export, large-scale data analytics, etc.
- **Documentation:** Publishing of reports and results, raw data, etc.
- (Deletion: Tearing down of environments)
:::

::: {.column width="20%"} 
```{mermaid}
flowchart TB
   Creation --> Monitoring
   Monitoring --> Operation
   Operation --> Monitoring
   Operation --> Evaluation
   Evaluation --> Documentation
   Documentation --> Creation
```
:::

::::

## PULCEO's Domain Model

![](images/domain-model-uml.svg)

## Case Study {.smaller}

![Representational cloud-edge topology with node and links and request for service placement.](images/topology.drawio.svg)

## Solution: API-driven Orchestration

Full lifecycle management based on APIs

# Creation

## Providers {.smaller}

Providers supply computational resources, e.g, Compute, Network, Storage, etc.

<br/>

Two types of providers:

- On-premises providers (any virtual machine), built-in
- Cloud providers (API availability), e.g., Microsoft Azure

**Example**: Creation of Microsoft Azure as provider with a service principal

```{.bash code-line-numbers="2,5-12"}
curl --request POST \
  --url http://localhost:8081/api/v1/providers \
  --header 'Accept: application/json' \
  --header 'Content-Type: application/json' \
  --data '{
	"providerName": "azure-provider",
	"providerType": "AZURE",
	"clientId": "00000000-00000000-00000000-00000000",
	"clientSecret": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
	"tenantId": "00000000-00000000-00000000-00000000",
	"subscriptionId": "00000000-00000000-00000000-00000000"
  }'
```

## Nodes (fog1) {.smaller}

:::: {.columns}

::: {.column width="50%"}
- Provider: Microsoft Azure (Cloud)
- Capabilities: 2 vCPU, 8 GB memory, 32 GB storage
- Location: France, Paris

```{.bash code-line-numbers="2,6-15"}
curl --request POST \
  --url http://localhost:8081/api/v1/nodes \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
  --header 'Content-Type: application/json' \
  --data '{
	"nodeType":"AZURE",
	"providerName":"azure-provider",
	"name":"fog1",
	"type":"fog",
	"cpu":"2",
	"memory":"8",
	"region":"francecentral",
	"tags": []
}'
```
:::

::: {.column width="50%"}
![](images/topology-nodes-fog1.svg)
:::

::::

## Nodes (fog3) {.smaller}

:::: {.columns}

::: {.column width="50%"}
- Provider: Local data center (On-premises)
- Capabilities: 2 vCPU, 2 GB memory, 27 GB storage
- Location: Bamberg, Germany

```{.bash code-line-numbers="2,6-19"}
curl --request POST \
  --url http://localhost:8081/api/v1/nodes \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
  --header 'Content-Type: application/json' \
  --data '{
	"nodeType":"ONPREM",
	"type": "fog",
	"name": "fog3",
	"providerName":"default",
	"hostname":"h5138.pi.uni-bamberg.de",
	"pnaInitToken":"XXXXX",
	"country": "Germany",
	"state": "Bavaria",
	"city": "Bamberg",
	"latitude": 49.9036,
	"longitude": 10.8700,
	"tags": []
}'
```
:::

::: {.column width="50%"}
![](images/topology-nodes-fog1-fog3.drawio.svg)
:::

::::

## Links (fog3-fog1) {.smaller}

:::: {.columns}

::: {.column width="50%"}
- Link between fog3 and fog1
- Represents a logical connection
- Later used to obtain round-trip time and bandwidth between nodes 
- <(,)>: <(*latency*, *bandwidth*), ...>

```{.bash code-line-numbers="2,6-11"}
curl --request POST \
  --url http://localhost:8081/api/v1/links \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
  --header 'Content-Type: application/json' \
  --data '{
    "linkType": "NODE_LINK",
    "name": "fog3-fog1",
    "srcNodeId": "fog3",
    "destNodeId": "fog1"
}'
```
:::

::: {.column width="50%"}
![](images/topology-subgraph.drawio.svg)
:::

::::

# Monitoring

Example: Nodes and Links

## Metric Requests { .smaller }

:::: {.columns}

::: {.column width="50%"}
- Collection of monitoring data
  - CPU, memory, storage and network utilization for nodes and applications
  - ICMP round-trip time, TCP & UDP bandwidth for links
- Individual and batch (*) assignments
- **Example:** Latency all for links, once per hour (recurrence 3600s = 1h)

```{.bash code-line-numbers="2,6-11"}
curl --request POST \
  --url http://localhost:8081/api/v1/metric-requests \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXX' \
  --header 'Content-Type: application/json' \
  --data '{
	"type":"icmp-rtt",
	"linkId":"*",
	"recurrence":"3600"
}'
```
:::

::: {.column width="50%"}
![](images/topology-nodes-fog1-fog3-latency-bw.drawio.svg)
:::

::::

# Operation

(Service Placement)

## Workload {.smaller}

:::: {.columns}

::: {.column width="50%"}
- Example: One instance of edge-iot-simulator (eis)^[https://github.com/spboehm/edge-iot-simulator] is placed on node fog1
- Mimics a typical application in cloud-edge environments:
  - Simulates a temperature sensor (sends temperature readings at regular intervals)
  - Allows to perform HTTP requests to simulate a microservice application
- Example resource assignments:
  - 1 vCPU
  - 1 GB memory
:::

::: {.column width="50%"}
TODO
:::

::::

## Resource Management

:::: {.columns}

::: {.column width="50%"}
CPU resources of fog1
```{.bash code-line-numbers="2"}
curl --request GET \
  --url http://localhost:8081/api/v1/nodes/fog1/cpu \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
```
```{.json}
{
	"uuid": "8aeae447-a552-4ea2-86a3-2bd1f79d6117",
	"nodeUUID": "e1076174-380a-47e4-a468-b9fd1b0ea309",
	"nodeName": "fog1",
	"cpuCapacity": {
		"modelName": "Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz",
		"cores": 2,
		"threads": 2,
		"bogoMIPS": 5187.81,
		"minimalFrequency": 2593.906,
		"averageFrequency": 2593.906,
		"maximalFrequency": 2593.906,
		"shares": 2000,
		"slots": 0.0,
		"mips": 5187.81,
		"gflop": 0.0
	},
	"cpuAllocatable": {
		"modelName": "Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz",
		"cores": 2,
		"threads": 2,
		"bogoMIPS": 5187.81,
		"minimalFrequency": 2593.906,
		"averageFrequency": 2593.906,
		"maximalFrequency": 2593.906,
		"shares": 2000,
		"slots": 0.0,
		"mips": 5187.81,
		"gflop": 0.0
	}
}
```
:::

::: {.column width="50%"}
Memory resources of fog2
```{.bash code-line-numbers="2"}
curl --request GET \
  --url http://localhost:8081/api/v1/nodes/fog1/memory \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
```


```{.json}
{
	"uuid": "22665086-fced-4b9a-b493-f264a7afe37a",
	"nodeUUID": "e1076174-380a-47e4-a468-b9fd1b0ea309",
	"nodeName": "fog1",
	"memoryCapacity": {
		"size": 7.753273,
		"slots": 0
	},
	"memoryAllocatable": {
		"size": 7.753273,
		"slots": 0
	}
}
```
:::

::::

## Applications (Service Placement) {.smaller}

```{.bash}
curl --request POST \
  --url http://localhost:8081/api/v1/applications \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXX' \
  --header 'Content-Type: application/json' \
  --data '{
	"nodeId": "fog1",
	"name": "edge-iot-simulator",
	"applicationComponents": [
		{
			"name": "component-eis",
			"image": "ghcr.io/spboehm/edge-iot-simulator:v1.1.0",
			"port": 80,
			"protocol": "HTTPS",
			"applicationComponentType": "PUBLIC",
			"environmentVariables": {
				"MQTT_SERVER_NAME":"XXXXX.s1.eu.hivemq.cloud",
				"MQTT_PORT":"8883",
				"MQTT_TLS":"True",
				"MQTT_USERNAME": "XXXXX",
				"MQTT_PASSWORD": "XXXXX",
				"MQTT_CLIENT_ID":"fog1-edge-iot-simulator",
				"WEB_PORT": 80
			}
		}
	]
}'
```

# Evaluation

## API Requests

![](./images/requests-table-2.png)

## Idle Resource Utilization by Nodes { .smaller }

CPU and memory utilization by nodes

:::: {.columns}

::: {.column width="70%"}
![](plots/combined_cpu_mem_util_plot.svg){width=100%}
![](plots/combined_storage_net_util_plot.svg){width=100%}
:::

::: {.column width="30%"}
- CPU utilization relatively low and stable at around 5%
- Memory consumption primarily caused by OS, K8s, and container runtime
- Storage almost constant over time because of no data is persistent
- Traffic partially relatively high because of fully utilized link quality monitoring
:::

::::

## Link Quality Metrics (excerpt) { .smaller }

:::: {.columns}

::: {.column width="60%"}
![](images/link-quality-table.png)
:::

::: {.column width="40%"}
- ICMP round-trip time deviating depending on the geographical distance
- TCP and UDP bandwidth reached (almost) the target of 65 Mbit/s
- Standard deviation depending geographical distance
- Measurement under stable network conditions (DFN and cloud provider networks)
:::

::::

## Application Resource Utilization

Resource utilization under load (including deployed edge-iot-simulators)

:::: {.columns}

::: {.column width="75%"}
![](plots/combined_cpu_mem_util_plot_pods_facet.svg)
:::

::: {.column width="25%"}
- Peaks in CPU utilization caused regular bandwidth measurements with *iperf3*
- Constant memory consumption over time
- Deployed workload only caused minor load on all machines
:::

::::

## Application Resource Utilization { .smaller }

Resource utilization under load (including deployed edge-iot-simulators)

:::: {.columns}

::: {.column width="75%"}
![](plots/combined_net_util_pods_facet.svg)
:::

::: {.column width="25%"}
- Traffic mainly caused by regular bandwidth checks
- System component and workload did not introduce large amounts of traffic
:::

::::

## Application Response Time

 - Measured by devices
 - Values have been submitted in a standardized JSON format via MQTT

![](plots/application_response_time_plot.svg)

# Documentation

## Orchestration Data

:::: {.columns}

::: {.column width="60%"}
JSON export of all entities of the domain model: *Providers*, *Nodes*, *Links*, *Metric-Requests*, *Applica-tions*, *Resources*, *CPUs*, *Memory*, *Events*

Example for nodes:

```{.bash code-line-numbers="2,6-11"}
curl --request GET \
  --url http://localhost:8081/api/v1/nodes \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
```
<br />
<details>
<summary>JSON output for nodes</summary>
```{.json .code-overflow-wrap .code-overflow-scroll}
[
  {
    "uuid": "e6c27c8a-a337-49e1-8662-38c96bff3351",
    "providerName": "default",
    "hostname": "h5137.pi.uni-bamberg.de",
    "pnaUUID": "be6f0093-ebff-4494-8123-6ab50d3ae8e5",
    "node": {
      "name": "fog3",
      "type": "FOG",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "Germany",
      "state": "Bavaria",
      "city": "Bamberg",
      "longitude": 10.87,
      "latitude": 49.9036,
      "tags": [
        {
          "key": "properties",
          "value": "C++, Linux, Python"
        }
      ]
    }
  },
  {
    "uuid": "22d5cc00-3264-4ad5-b85d-26c1bbb4cbf3",
    "providerName": "default",
    "hostname": "h5136.pi.uni-bamberg.de",
    "pnaUUID": "265916fb-2092-40ee-9528-b32f4ea911a1",
    "node": {
      "name": "fog2",
      "type": "FOG",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "Germany",
      "state": "Bavaria",
      "city": "Bamberg",
      "longitude": 10.87,
      "latitude": 49.9036,
      "tags": [
        {
          "key": "properties",
          "value": "MySQL, .NET, C++, Python"
        }
      ]
    }
  },
  {
    "uuid": "615ba998-3ecb-40f4-8a00-bdebf5894303",
    "providerName": "default",
    "hostname": "h5138.pi.uni-bamberg.de",
    "pnaUUID": "6dc8fca9-d1a6-4436-b1c9-122bbaa55235",
    "node": {
      "name": "fog1",
      "type": "FOG",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "Germany",
      "state": "Bavaria",
      "city": "Bamberg",
      "longitude": 10.87,
      "latitude": 49.9036,
      "tags": [
        {
          "key": "properties",
          "value": "C++, Linux, Python"
        }
      ]
    }
  },
  {
    "uuid": "3f425fb8-c4e5-4eab-9d30-4552e94abdb3",
    "providerName": "azure-provider",
    "hostname": "pulceo-node-6659339536.westus.cloudapp.azure.com",
    "pnaUUID": "3b4af61f-8bb4-4118-9640-b530c6aec54e",
    "node": {
      "name": "cloud2",
      "type": "CLOUD",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "USA",
      "state": "California",
      "city": "San Francisco",
      "longitude": -119.852,
      "latitude": 47.233,
      "tags": [
        {
          "key": "properties",
          "value": "C++, Spark, MySQL, Linux, .NET, Python"
        }
      ]
    }
  },
  {
    "uuid": "98036c1c-1d51-4fcd-81ab-21fb40b14b3b",
    "providerName": "azure-provider",
    "hostname": "pulceo-node-eae9342543.westeurope.cloudapp.azure.com",
    "pnaUUID": "26c8c3d4-badc-4b7a-adb5-ec9d920784c3",
    "node": {
      "name": "cloud1",
      "type": "CLOUD",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "Netherlands",
      "state": "Noord-Holland",
      "city": "Schiphol",
      "longitude": 4.9,
      "latitude": 52.3667,
      "tags": [
        {
          "key": "properties",
          "value": "Java, .NET, Ruby, MySQL"
        }
      ]
    }
  },
  {
    "uuid": "c329ad3d-ab6c-41a9-aa8d-5705787a60d6",
    "providerName": "default",
    "hostname": "h5135.pi.uni-bamberg.de",
    "pnaUUID": "c4cbae94-dd35-4ba8-a374-0ceebddb7765",
    "node": {
      "name": "gateway1",
      "type": "GATEWAY",
      "layer": 1,
      "role": "WORKLOAD",
      "group": "",
      "country": "Germany",
      "state": "Bavaria",
      "city": "Bamberg",
      "longitude": 10.87,
      "latitude": 49.9036,
      "tags": []
    }
  }
]
```
</details>
:::

::: {.column width="40%"}

Reports for the two phases of the experiment:

```{python}
import qrcode
import qrcode.image.svg

img = qrcode.make('https://spboehm.github.io/pulceo-misc/reports/summersoc2024-prod-idle/', image_factory=qrcode.image.svg.SvgPathImage)
img.save("images/qrcode-summersoc2024-prod-idle.svg")
```

![](images/qrcode-summersoc2024-prod-idle.svg)

SummerSOC2024-prod-idle

```{python}
import qrcode
import qrcode.image.svg

img = qrcode.make('https://spboehm.github.io/pulceo-misc/reports/summersoc2024-prod-load/', image_factory=qrcode.image.svg.SvgPathImage)
img.save("images/qrcode-summersoc2024-prod-load.svg")
```

![](images/qrcode-summersoc2024-prod-load.svg)

SummerSOC2024-prod-load

:::

::::

## Metric Exports

&#9312; Asynchronous data export via RESTful HTTP API

```{.bash}
curl --request POST \
  --url http://localhost:8081/api/v1/metric-exports \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
  --header 'Content-Type: application/json' \
  --data '{
	"metricType": "CPU_UTIL"
}'
```

&#9313; Check the current progress of the metric export request:

```{.bash }
curl --request GET \
  --url http://localhost:7777/api/v1/metric-exports \
  --header 'Accept: application/json' \
  --header 'Authorization: XXXXX' \
```

&#9314; Finally download via the given `url`:
```{.json code-line-numbers="5-6"}
{
	"metricExportUUID": "34e46c91-82b8-48dd-aaea-3619459a10aa",
	"metricType": "CPU_UTIL",
	"numberOfRecords": 100,
	"url": "http://localhost:8081/api/v1/metric-exports/34e46c91-82b8-48dd-aaea-3619459a10aa/blobs/CPU_UTIL-84dda748-d6c0-4c33-b593-5aca223598f3.csv",
	"metricExportState": "PENDING" -> "COMPLETED"
}
```

## Related Solutions

## Discussion and Limitations

## Contributions

- Holistic accomplishment of service placement experiments
- Fully decoupled service orchestration with an HTTP API
- Flexible resource management
- Configurable monitoring with real-time latency and bandwidth
- Support for high-level orchestration metrics, like application response time
- Automatic orchestration reports
- Blazingly fast metrics and event export 
- Built for advanced cloud-edge orchestration algorithms, strategies, and policies
- Strong scientific and industrial foundation
  - Orchestration architecture based on a scientific meta-study 
  - Feature Engineering based on scientific, peer-reviewed service placement publications
  - Implementation following an industry standard (OpenFog RA) 

## Conclusion

Conclusion:

Future Work:

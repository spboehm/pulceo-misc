---
title: "PULCEO in Action"
subtitle: "API-driven Task Scheduling and Offloading <br /> with PULCEO: An Extension"
author: Sebastian Böhm and Guido Wirtz
institute: University of Bamberg, Germany
format: 
  revealjs:
    smaller: true
    slide-number: true
    footer: <https://github.com/spboehm/pulceo-misc>
    logo: images/dsg.png
    css: custom.scss
    template-partials:
      - title-slide.html
---

## Task Scheduling / Offloading {.smaller}

![](figures/task-offloading.drawio.svg)


- IoT / mobile clients, submitting set of independent / atomic tasks $T$
- Heterogeneous cloud, edge and fog nodes $N$
- Tasks $T$ and nodes $N$ are described by 
  - Properties $P$: Layer, Location, Costs, ... 
  - Requirements $R$: CPU, memory, bandwidth, ...

## Motivation

::: columns
::: {.column width="60%"}

Many solutions exist for **task scheduling / offloading**

But, similar to the provision model of service placement:

- **Reproducibility**
- (General) **Applicability**

are **limited** because of:

- **simulation-based** evaluations
- **custom** implementations
- missing **real-world experiments**
:::

::: {.column width="40%"}

Prevalent are:

- iFogSim / iFogSim2
- Local, custom Applications
- Solvers

<br ><br >

Only **3** out of **36** task offloading strategies were using real-world implementations and evaluations.[^1]
:::
:::

[^1]: S. Dong et al., “Task offloading strategies for mobile edge computing: A survey,” Computer Networks, vol. 254, p. 110791, Dec. 2024, doi: 10.1016/j.comnet.2024.110791.

## Simulations are sufficient?

Selected limitations, addressed by the **authors** of task offloading / scheduling solutions:

> Where the value of **CPU weight** and **memory weight** is an **empirical issue**, and **multiple experiments are required** to obtain the optimal value such that α + β = 1. In this paper, all parameters are set to appropriate values.[^1]

> Phare [the scheduling solution] requires updated information on the clusters participating in the federation,
including **CPU**, **memory**, and **bandwidth usage**. A **real-world implementation** should thus **carefully balance** the resolution of such data and the additional overhead required to process it.[^2]

[^2]: G. Castellano, S. Galantino, F. Risso, and A. Manzalini, “Scheduling Multi-Component Applications Across Federated Edge Clusters With Phare,” IEEE Open J. Commun. Soc., vol. 5, pp. 1814–1826, 2024, doi: 10.1109/OJCOMS.2024.3377917.

Consequently, there is a need for real-world experiments.

# Contributions

1. Task scheduling and offloading in line with holistic cloud-edge orchestration.
2. A general, universal, and flexible model of tasks.
3. Integration of task-processing applications.
4. Automated standard evaluation with  metrics for task scheduling and offloading.

## Holistic Cloud-Edge Orchestration {.smaller}

![](figures/holistic%20cloud-edge-orchestration-with-pulceo.svg)

## Tasks: Domain Model

Extension of step **Operation**, supported by **P**ulceo-**S**ervice-**M**anager (**PSM**).

::: columns
::: {.column width="40%"}
- *Task* with fixed / variable 
  - requirements $R$
  - properties $T$
- *TaskMetaData*: Internal routing information
- *TaskScheduling*: Current State of Scheduling
- *TaskStatusLog*: State transitions over time
:::

::: {.column width="60%"}
![](figures/pulceo-architecture-domain-model-condensed.drawio.svg)
:::
:::

# Orchestration Workflow

Based on *A High-Efficient Joint ’Cloud-Edge’ Aware Strategy for Task Deployment and Load Balancing*.

*Y. Dong, G. Xu, M. Zhang, and X. Meng, “A High-Efficient Joint ’Cloud-Edge’ Aware Strategy for Task Deployment and Load Balancing,” IEEE Access, vol. 9, pp. 12791–12802, 2021, doi: 10.1109/ACCESS.2021.3051672.*

## Overview of Experiment (simplified)

![](figures/pulceo-architecture-experimental-setup.drawio.svg)

- Decoupled scheduler using HTTP (`/tasks`) and MQTT (`tasks/+`) for $\theta$
- $T$, $P(t_i)_{size}={S, M, L}$ and batch sizes $(200,...,800)$
  - P1
  - P2
  - P3
- Instance of edge-iot-simulator used for task-processing

## Task Submission

::: columns
::: {.column width="50%"}

POST /tasks

```json
{
  "createdBy": "task_emitter.py",
  "sizeOfWorkload": 50,
  "sizeDuringTransmission": 50,
  "deadline": 50,
  "payload_length": 50,
  "payload": "payload",
  "cpu_shares": 500,
  "memory_size": 0.25,
  "properties": {
    "task_type": "small"
  }
 }
```

:::

::: {.column width="50%"}
![](figures/1-task-submission.drawio.svg){fig-align="center"}
:::
:::

## Task Scheduling and Offloading

::: columns
::: {.column width="40%"}

HTTP PUT /tasks/{id}

```json
{
  "taskId": "831de05b-...",
  "nodeId": "0b1c6697-...",
  "appId": "74e18419-",
  "appComponentId": "6a463804-",
  "status": "SCHEDULED",
  "properties": {
	"batchSize": "100",
	"layer": "cloud-only",
	"policy": "dong et al."
  }
}
```

HTTP POST /tasks on PNA

```json
{
  "taskId": "831de05b-...",
  "nodeId": "0b1c6697-...",
  "appId": "74e18419-",
  "appComponentId": "6a463804-",
  ...
}
```
:::

::: {.column width="60%"}
![](figures/2-task-scheduling-offloading.drawio.svg){fig-align="center"}
:::
:::

## Task Processing

::: columns
::: {.column width="42%"}

**Forward to application:**

HTTP POST /endpoint

```json
{
  "taskId": "831de05b-...",
  "callbackProtocol": "0b1c6697-...",
  "callbackEndpoint": "74e18419-",
  ...
}
```

**Update task status internally:**

HTTP PUT /internal/tasks/{id}

```json
{
  "taskId": "831de05b-...",
  "newTaskStatus": "COMPLETED"
}
```
:::

::: {.column width="58%"}
![](figures/3-task-processing.drawio.svg){fig-align="center"}
:::
:::

# Evaluation

Task Metrics ‧ Performance Metrics  

- Provided by the automatically generated orchestration reports
- On top of already implemented metrics, like CPU, memory, and network-related metrics

## Task Metrics

::: columns
::: {.column width="68%"}
![](plots/task_metrics.pdf.svg)
:::

::: {.column width="32%"}
- Drilldown into overall completion time
- Overhead of platform components
  - Scheduling (PSM): 0.05$s
  - Offloading: $0.44$s
  - Waiting (PNA): $0.05$s
  - Waiting (Total): $0.54$s
- Naive overhead: $0.49$s (including HTTP overhead)
:::
:::

## Task Metrics cont'd

Detailed overview of task metrics for different batch sizes

![](images/task-metric-statistics.png)

## Performance Metrics

- *Task Response Time*: Time between submitting the task and receiving the response
- *Task Arrival Rate*: Number of tasks/s arriving at PSM
- *Task Throughput*: Number of tasks/s completed by the system (*NEW*->*RUNNING*)

![](plots/performance_metrics.pdf.svg)

## Conclusion & Limitations

::: columns
::: {.column width="50%"}
**Contributions**

1. 🚀 Task scheduling and offloading in line with holistic cloud-edge orchestration.
2. 🌐 A general, universal, and flexible model of tasks.
3. ✅ Integration of task-processing applications.
4. 🔄 Automated standard evaluation with  metrics for task scheduling and offloading.

Empirical evaluation with first insights on the overall overhead.
:::

::: {.column width="50%"}

**Limitations**

- 🚨 Integration of task-processing applications only via HTTP and MQTT
- 🚨 Centralized, cloud-based, and only partly decentralized orchestration 
- 🚨 Minimal cloud-edge topology for first evaluation

<div style="text-align: center;">
Additional Resources
</div>

![](images/qr_code_pulceo_misc.svg){fig-align="center"}
:::
:::
